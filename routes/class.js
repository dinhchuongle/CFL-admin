const express = require("express");
const router = express.Router();
const { getClasses, addClass, deleteClass } = require("../models/google-sheet");

// üìò GET - Hi·ªÉn th·ªã danh s√°ch l·ªõp
router.get("/", async (req, res) => {
  try {
    const classes = await getClasses();
    res.render("class_list", { classes });
  } catch (error) {
    console.error(error);
    res.status(500).send("Kh√¥ng th·ªÉ l·∫•y danh s√°ch l·ªõp.");
  }
});

// üñäÔ∏è GET - Hi·ªÉn th·ªã form th√™m l·ªõp
router.get("/new", (req, res) => {
  res.render("new_class");
});

// üü¢ POST - Th√™m l·ªõp m·ªõi
router.post("/new", async (req, res) => {
  try {
    const data = req.body;

    const teachersPerSession = data.teachersPerSession ? data.teachersPerSession : "[]"; // üëà L·∫•y th√™m teachersPerSession

    await addClass({
      name: data.name,
      startDate: data.startDate,
      durationWeeks: data.durationWeeks,
      schedule: data.schedule,
      teacher: "", // Kh√¥ng l∆∞u teacher c·ªë ƒë·ªãnh n·ªØa
      zoomLink: data.zoomLink,
      zaloGroup: data.zaloGroup,
      program: data.program,
      teachersPerSession: teachersPerSession // üëà G·ª≠i v√†o Sheet
    });

    res.redirect("/class");
  } catch (error) {
    console.error(error);
    res.status(500).send("Kh√¥ng th·ªÉ th√™m l·ªõp m·ªõi.");
  }
});

// üóëÔ∏è POST - Xo√° l·ªõp h·ªçc
router.post("/delete/:rowIndex", async (req, res) => {
  try {
    const rowIndex = parseInt(req.params.rowIndex);
    await deleteClass(rowIndex);
    res.redirect("/class");
  } catch (error) {
    console.error(error);
    res.status(500).send("Kh√¥ng th·ªÉ xo√° l·ªõp.");
  }
});

// üìÖ GET - Hi·ªÉn th·ªã l·ªãch h·ªçc t·ª´ng l·ªõp
router.get("/:rowIndex/schedule", async (req, res) => {
  try {
    const rowIndex = parseInt(req.params.rowIndex);
    const classes = await getClasses();

    if (rowIndex < 0 || rowIndex >= classes.length) {
      return res.status(404).send("Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc.");
    }

    const cls = classes[rowIndex];

    // Parse teachersPerSession t·ª´ JSON
    let teachersPerSession = [];
    try {
      teachersPerSession = cls.teachersPerSession ? JSON.parse(cls.teachersPerSession) : [];
    } catch (error) {
      console.error("L·ªói parse teachersPerSession:", error);
    }

    const scheduleDays = (cls.schedule || "")
      .replace(/-/g, ",")
      .split(",")
      .map(day => day.trim());

    const startDate = new Date(cls.startDate);
    const totalWeeks = parseInt(cls.durationWeeks) || 0;
    const sessions = [];

    if (!scheduleDays.length || totalWeeks <= 0) {
      return res.render("class_schedule", { cls, sessions });
    }

    const dayNames = ["CN", "T2", "T3", "T4", "T5", "T6", "T7"];

    let current = new Date(startDate);
    let sessionCount = 1;
    let maxDate = new Date(startDate);
    maxDate.setDate(maxDate.getDate() + 365);

    while (current <= maxDate) {
      if (sessionCount > totalWeeks * scheduleDays.length) break;

      const currentDay = current.getDay();
      const currentDayString = dayNames[currentDay];

      if (scheduleDays.includes(currentDayString)) {
        // X√°c ƒë·ªãnh gi√°o vi√™n ƒë√∫ng ng√†y
        const teacherObj = teachersPerSession.find(tp => tp.day === currentDayString);
        const teacherName = teacherObj ? teacherObj.teacher : "Ch∆∞a ph√¢n c√¥ng";

        sessions.push({
          title: `Bu·ªïi ${sessionCount} - ${teacherName}`,
          date: current.toISOString().split("T")[0]
        });
        sessionCount++;
      }

      current.setDate(current.getDate() + 1);
    }

    res.render("class_schedule", { cls, sessions });
  } catch (error) {
    console.error(error);
    res.status(500).send("Kh√¥ng th·ªÉ l·∫•y l·ªãch h·ªçc l·ªõp.");
  }
});

module.exports = router;
